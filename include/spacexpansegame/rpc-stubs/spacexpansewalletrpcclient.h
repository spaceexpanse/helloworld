/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_SPACEXPANSEWALLETRPCCLIENT_H_
#define JSONRPC_CPP_STUB_SPACEXPANSEWALLETRPCCLIENT_H_

#include <jsonrpccpp/client.h>

class SpaceXpanseWalletRpcClient : public jsonrpc::Client
{
    public:
        SpaceXpanseWalletRpcClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        Json::Value getaddressinfo(const std::string& address) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["address"] = address;
            Json::Value result = this->CallMethod("getaddressinfo",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string signmessage(const std::string& address, const std::string& message) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["address"] = address;
            p["message"] = message;
            Json::Value result = this->CallMethod("signmessage",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string name_update(const std::string& name, const std::string& value) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["name"] = name;
            p["value"] = value;
            Json::Value result = this->CallMethod("name_update",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_SPACEXPANSEWALLETRPCCLIENT_H_
