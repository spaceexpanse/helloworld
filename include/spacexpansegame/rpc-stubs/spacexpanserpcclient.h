/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_SPACEXPANSERPCCLIENT_H_
#define JSONRPC_CPP_STUB_SPACEXPANSERPCCLIENT_H_

#include <jsonrpccpp/client.h>

class SpaceXpanseRpcClient : public jsonrpc::Client
{
    public:
        SpaceXpanseRpcClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        Json::Value getzmqnotifications() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getzmqnotifications",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        void trackedgames(const std::string& command, const std::string& gameid) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["command"] = command;
            p["gameid"] = gameid;
            this->CallNotification("trackedgames",p);
        }
        Json::Value getnetworkinfo() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getnetworkinfo",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value getblockchaininfo() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getblockchaininfo",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string getblockhash(int height) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["height"] = height;
            Json::Value result = this->CallMethod("getblockhash",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value getblockheader(const std::string& blockhash) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["blockhash"] = blockhash;
            Json::Value result = this->CallMethod("getblockheader",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value game_sendupdates(const std::string& fromblock, const std::string& gameid) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["fromblock"] = fromblock;
            p["gameid"] = gameid;
            Json::Value result = this->CallMethod("game_sendupdates",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value verifymessage(const std::string& address, const std::string& message, const std::string& signature) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["address"] = address;
            p["message"] = message;
            p["signature"] = signature;
            Json::Value result = this->CallMethod("verifymessage",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value getrawmempool() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getrawmempool",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_SPACEXPANSERPCCLIENT_H_
