// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sidechannel/proto/stateproof.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sidechannel_2fproto_2fstateproof_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sidechannel_2fproto_2fstateproof_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sidechannel/proto/signatures.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sidechannel_2fproto_2fstateproof_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sidechannel_2fproto_2fstateproof_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sidechannel_2fproto_2fstateproof_2eproto;
namespace spacexpanse {
namespace proto {
class StateProof;
struct StateProofDefaultTypeInternal;
extern StateProofDefaultTypeInternal _StateProof_default_instance_;
class StateTransition;
struct StateTransitionDefaultTypeInternal;
extern StateTransitionDefaultTypeInternal _StateTransition_default_instance_;
}  // namespace proto
}  // namespace spacexpanse
PROTOBUF_NAMESPACE_OPEN
template<> ::spacexpanse::proto::StateProof* Arena::CreateMaybeMessage<::spacexpanse::proto::StateProof>(Arena*);
template<> ::spacexpanse::proto::StateTransition* Arena::CreateMaybeMessage<::spacexpanse::proto::StateTransition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spacexpanse {
namespace proto {

// ===================================================================

class StateTransition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacexpanse.proto.StateTransition) */ {
 public:
  inline StateTransition() : StateTransition(nullptr) {}
  ~StateTransition() override;
  explicit PROTOBUF_CONSTEXPR StateTransition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateTransition(const StateTransition& from);
  StateTransition(StateTransition&& from) noexcept
    : StateTransition() {
    *this = ::std::move(from);
  }

  inline StateTransition& operator=(const StateTransition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateTransition& operator=(StateTransition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateTransition& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateTransition* internal_default_instance() {
    return reinterpret_cast<const StateTransition*>(
               &_StateTransition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StateTransition& a, StateTransition& b) {
    a.Swap(&b);
  }
  inline void Swap(StateTransition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateTransition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateTransition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateTransition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StateTransition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StateTransition& from) {
    StateTransition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateTransition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacexpanse.proto.StateTransition";
  }
  protected:
  explicit StateTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveFieldNumber = 1,
    kNewStateFieldNumber = 2,
  };
  // optional bytes move = 1;
  bool has_move() const;
  private:
  bool _internal_has_move() const;
  public:
  void clear_move();
  const std::string& move() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_move(ArgT0&& arg0, ArgT... args);
  std::string* mutable_move();
  PROTOBUF_NODISCARD std::string* release_move();
  void set_allocated_move(std::string* move);
  private:
  const std::string& _internal_move() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_move(const std::string& value);
  std::string* _internal_mutable_move();
  public:

  // optional .spacexpanse.proto.SignedData new_state = 2;
  bool has_new_state() const;
  private:
  bool _internal_has_new_state() const;
  public:
  void clear_new_state();
  const ::spacexpanse::proto::SignedData& new_state() const;
  PROTOBUF_NODISCARD ::spacexpanse::proto::SignedData* release_new_state();
  ::spacexpanse::proto::SignedData* mutable_new_state();
  void set_allocated_new_state(::spacexpanse::proto::SignedData* new_state);
  private:
  const ::spacexpanse::proto::SignedData& _internal_new_state() const;
  ::spacexpanse::proto::SignedData* _internal_mutable_new_state();
  public:
  void unsafe_arena_set_allocated_new_state(
      ::spacexpanse::proto::SignedData* new_state);
  ::spacexpanse::proto::SignedData* unsafe_arena_release_new_state();

  // @@protoc_insertion_point(class_scope:spacexpanse.proto.StateTransition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr move_;
    ::spacexpanse::proto::SignedData* new_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechannel_2fproto_2fstateproof_2eproto;
};
// -------------------------------------------------------------------

class StateProof final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacexpanse.proto.StateProof) */ {
 public:
  inline StateProof() : StateProof(nullptr) {}
  ~StateProof() override;
  explicit PROTOBUF_CONSTEXPR StateProof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateProof(const StateProof& from);
  StateProof(StateProof&& from) noexcept
    : StateProof() {
    *this = ::std::move(from);
  }

  inline StateProof& operator=(const StateProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateProof& operator=(StateProof&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateProof& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateProof* internal_default_instance() {
    return reinterpret_cast<const StateProof*>(
               &_StateProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StateProof& a, StateProof& b) {
    a.Swap(&b);
  }
  inline void Swap(StateProof* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateProof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateProof>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StateProof& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StateProof& from) {
    StateProof::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateProof* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacexpanse.proto.StateProof";
  }
  protected:
  explicit StateProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransitionsFieldNumber = 2,
    kInitialStateFieldNumber = 1,
  };
  // repeated .spacexpanse.proto.StateTransition transitions = 2;
  int transitions_size() const;
  private:
  int _internal_transitions_size() const;
  public:
  void clear_transitions();
  ::spacexpanse::proto::StateTransition* mutable_transitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::StateTransition >*
      mutable_transitions();
  private:
  const ::spacexpanse::proto::StateTransition& _internal_transitions(int index) const;
  ::spacexpanse::proto::StateTransition* _internal_add_transitions();
  public:
  const ::spacexpanse::proto::StateTransition& transitions(int index) const;
  ::spacexpanse::proto::StateTransition* add_transitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::StateTransition >&
      transitions() const;

  // optional .spacexpanse.proto.SignedData initial_state = 1;
  bool has_initial_state() const;
  private:
  bool _internal_has_initial_state() const;
  public:
  void clear_initial_state();
  const ::spacexpanse::proto::SignedData& initial_state() const;
  PROTOBUF_NODISCARD ::spacexpanse::proto::SignedData* release_initial_state();
  ::spacexpanse::proto::SignedData* mutable_initial_state();
  void set_allocated_initial_state(::spacexpanse::proto::SignedData* initial_state);
  private:
  const ::spacexpanse::proto::SignedData& _internal_initial_state() const;
  ::spacexpanse::proto::SignedData* _internal_mutable_initial_state();
  public:
  void unsafe_arena_set_allocated_initial_state(
      ::spacexpanse::proto::SignedData* initial_state);
  ::spacexpanse::proto::SignedData* unsafe_arena_release_initial_state();

  // @@protoc_insertion_point(class_scope:spacexpanse.proto.StateProof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::StateTransition > transitions_;
    ::spacexpanse::proto::SignedData* initial_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechannel_2fproto_2fstateproof_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StateTransition

// optional bytes move = 1;
inline bool StateTransition::_internal_has_move() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StateTransition::has_move() const {
  return _internal_has_move();
}
inline void StateTransition::clear_move() {
  _impl_.move_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StateTransition::move() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.StateTransition.move)
  return _internal_move();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StateTransition::set_move(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.move_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spacexpanse.proto.StateTransition.move)
}
inline std::string* StateTransition::mutable_move() {
  std::string* _s = _internal_mutable_move();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.StateTransition.move)
  return _s;
}
inline const std::string& StateTransition::_internal_move() const {
  return _impl_.move_.Get();
}
inline void StateTransition::_internal_set_move(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.move_.Set(value, GetArenaForAllocation());
}
inline std::string* StateTransition::_internal_mutable_move() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.move_.Mutable(GetArenaForAllocation());
}
inline std::string* StateTransition::release_move() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.StateTransition.move)
  if (!_internal_has_move()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.move_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.move_.IsDefault()) {
    _impl_.move_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StateTransition::set_allocated_move(std::string* move) {
  if (move != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.move_.SetAllocated(move, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.move_.IsDefault()) {
    _impl_.move_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.StateTransition.move)
}

// optional .spacexpanse.proto.SignedData new_state = 2;
inline bool StateTransition::_internal_has_new_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_state_ != nullptr);
  return value;
}
inline bool StateTransition::has_new_state() const {
  return _internal_has_new_state();
}
inline const ::spacexpanse::proto::SignedData& StateTransition::_internal_new_state() const {
  const ::spacexpanse::proto::SignedData* p = _impl_.new_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::spacexpanse::proto::SignedData&>(
      ::spacexpanse::proto::_SignedData_default_instance_);
}
inline const ::spacexpanse::proto::SignedData& StateTransition::new_state() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.StateTransition.new_state)
  return _internal_new_state();
}
inline void StateTransition::unsafe_arena_set_allocated_new_state(
    ::spacexpanse::proto::SignedData* new_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_state_);
  }
  _impl_.new_state_ = new_state;
  if (new_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:spacexpanse.proto.StateTransition.new_state)
}
inline ::spacexpanse::proto::SignedData* StateTransition::release_new_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::spacexpanse::proto::SignedData* temp = _impl_.new_state_;
  _impl_.new_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::spacexpanse::proto::SignedData* StateTransition::unsafe_arena_release_new_state() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.StateTransition.new_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::spacexpanse::proto::SignedData* temp = _impl_.new_state_;
  _impl_.new_state_ = nullptr;
  return temp;
}
inline ::spacexpanse::proto::SignedData* StateTransition::_internal_mutable_new_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.new_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::spacexpanse::proto::SignedData>(GetArenaForAllocation());
    _impl_.new_state_ = p;
  }
  return _impl_.new_state_;
}
inline ::spacexpanse::proto::SignedData* StateTransition::mutable_new_state() {
  ::spacexpanse::proto::SignedData* _msg = _internal_mutable_new_state();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.StateTransition.new_state)
  return _msg;
}
inline void StateTransition::set_allocated_new_state(::spacexpanse::proto::SignedData* new_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_state_);
  }
  if (new_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_state));
    if (message_arena != submessage_arena) {
      new_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_state_ = new_state;
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.StateTransition.new_state)
}

// -------------------------------------------------------------------

// StateProof

// optional .spacexpanse.proto.SignedData initial_state = 1;
inline bool StateProof::_internal_has_initial_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_state_ != nullptr);
  return value;
}
inline bool StateProof::has_initial_state() const {
  return _internal_has_initial_state();
}
inline const ::spacexpanse::proto::SignedData& StateProof::_internal_initial_state() const {
  const ::spacexpanse::proto::SignedData* p = _impl_.initial_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::spacexpanse::proto::SignedData&>(
      ::spacexpanse::proto::_SignedData_default_instance_);
}
inline const ::spacexpanse::proto::SignedData& StateProof::initial_state() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.StateProof.initial_state)
  return _internal_initial_state();
}
inline void StateProof::unsafe_arena_set_allocated_initial_state(
    ::spacexpanse::proto::SignedData* initial_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_state_);
  }
  _impl_.initial_state_ = initial_state;
  if (initial_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:spacexpanse.proto.StateProof.initial_state)
}
inline ::spacexpanse::proto::SignedData* StateProof::release_initial_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::spacexpanse::proto::SignedData* temp = _impl_.initial_state_;
  _impl_.initial_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::spacexpanse::proto::SignedData* StateProof::unsafe_arena_release_initial_state() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.StateProof.initial_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::spacexpanse::proto::SignedData* temp = _impl_.initial_state_;
  _impl_.initial_state_ = nullptr;
  return temp;
}
inline ::spacexpanse::proto::SignedData* StateProof::_internal_mutable_initial_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.initial_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::spacexpanse::proto::SignedData>(GetArenaForAllocation());
    _impl_.initial_state_ = p;
  }
  return _impl_.initial_state_;
}
inline ::spacexpanse::proto::SignedData* StateProof::mutable_initial_state() {
  ::spacexpanse::proto::SignedData* _msg = _internal_mutable_initial_state();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.StateProof.initial_state)
  return _msg;
}
inline void StateProof::set_allocated_initial_state(::spacexpanse::proto::SignedData* initial_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_state_);
  }
  if (initial_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_state));
    if (message_arena != submessage_arena) {
      initial_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.initial_state_ = initial_state;
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.StateProof.initial_state)
}

// repeated .spacexpanse.proto.StateTransition transitions = 2;
inline int StateProof::_internal_transitions_size() const {
  return _impl_.transitions_.size();
}
inline int StateProof::transitions_size() const {
  return _internal_transitions_size();
}
inline void StateProof::clear_transitions() {
  _impl_.transitions_.Clear();
}
inline ::spacexpanse::proto::StateTransition* StateProof::mutable_transitions(int index) {
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.StateProof.transitions)
  return _impl_.transitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::StateTransition >*
StateProof::mutable_transitions() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.StateProof.transitions)
  return &_impl_.transitions_;
}
inline const ::spacexpanse::proto::StateTransition& StateProof::_internal_transitions(int index) const {
  return _impl_.transitions_.Get(index);
}
inline const ::spacexpanse::proto::StateTransition& StateProof::transitions(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.StateProof.transitions)
  return _internal_transitions(index);
}
inline ::spacexpanse::proto::StateTransition* StateProof::_internal_add_transitions() {
  return _impl_.transitions_.Add();
}
inline ::spacexpanse::proto::StateTransition* StateProof::add_transitions() {
  ::spacexpanse::proto::StateTransition* _add = _internal_add_transitions();
  // @@protoc_insertion_point(field_add:spacexpanse.proto.StateProof.transitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::StateTransition >&
StateProof::transitions() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.StateProof.transitions)
  return _impl_.transitions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace spacexpanse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sidechannel_2fproto_2fstateproof_2eproto
