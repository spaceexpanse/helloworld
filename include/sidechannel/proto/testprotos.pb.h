// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sidechannel/proto/testprotos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sidechannel_2fproto_2ftestprotos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sidechannel_2fproto_2ftestprotos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sidechannel_2fproto_2ftestprotos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sidechannel_2fproto_2ftestprotos_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sidechannel_2fproto_2ftestprotos_2eproto;
namespace spacexpanse {
namespace proto {
class ExtendedUnknownFieldTest;
struct ExtendedUnknownFieldTestDefaultTypeInternal;
extern ExtendedUnknownFieldTestDefaultTypeInternal _ExtendedUnknownFieldTest_default_instance_;
class TestBoardMove;
struct TestBoardMoveDefaultTypeInternal;
extern TestBoardMoveDefaultTypeInternal _TestBoardMove_default_instance_;
class TestBoardState;
struct TestBoardStateDefaultTypeInternal;
extern TestBoardStateDefaultTypeInternal _TestBoardState_default_instance_;
class UnknownFieldTest;
struct UnknownFieldTestDefaultTypeInternal;
extern UnknownFieldTestDefaultTypeInternal _UnknownFieldTest_default_instance_;
}  // namespace proto
}  // namespace spacexpanse
PROTOBUF_NAMESPACE_OPEN
template<> ::spacexpanse::proto::ExtendedUnknownFieldTest* Arena::CreateMaybeMessage<::spacexpanse::proto::ExtendedUnknownFieldTest>(Arena*);
template<> ::spacexpanse::proto::TestBoardMove* Arena::CreateMaybeMessage<::spacexpanse::proto::TestBoardMove>(Arena*);
template<> ::spacexpanse::proto::TestBoardState* Arena::CreateMaybeMessage<::spacexpanse::proto::TestBoardState>(Arena*);
template<> ::spacexpanse::proto::UnknownFieldTest* Arena::CreateMaybeMessage<::spacexpanse::proto::UnknownFieldTest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spacexpanse {
namespace proto {

// ===================================================================

class TestBoardState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacexpanse.proto.TestBoardState) */ {
 public:
  inline TestBoardState() : TestBoardState(nullptr) {}
  ~TestBoardState() override;
  explicit PROTOBUF_CONSTEXPR TestBoardState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestBoardState(const TestBoardState& from);
  TestBoardState(TestBoardState&& from) noexcept
    : TestBoardState() {
    *this = ::std::move(from);
  }

  inline TestBoardState& operator=(const TestBoardState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestBoardState& operator=(TestBoardState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestBoardState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestBoardState* internal_default_instance() {
    return reinterpret_cast<const TestBoardState*>(
               &_TestBoardState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestBoardState& a, TestBoardState& b) {
    a.Swap(&b);
  }
  inline void Swap(TestBoardState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestBoardState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestBoardState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestBoardState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestBoardState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestBoardState& from) {
    TestBoardState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestBoardState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacexpanse.proto.TestBoardState";
  }
  protected:
  explicit TestBoardState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kOnlyCompareThisFieldNumber = 3,
    kInvalidFieldNumber = 2,
  };
  // optional string msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional string only_compare_this = 3;
  bool has_only_compare_this() const;
  private:
  bool _internal_has_only_compare_this() const;
  public:
  void clear_only_compare_this();
  const std::string& only_compare_this() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_only_compare_this(ArgT0&& arg0, ArgT... args);
  std::string* mutable_only_compare_this();
  PROTOBUF_NODISCARD std::string* release_only_compare_this();
  void set_allocated_only_compare_this(std::string* only_compare_this);
  private:
  const std::string& _internal_only_compare_this() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_only_compare_this(const std::string& value);
  std::string* _internal_mutable_only_compare_this();
  public:

  // optional bool invalid = 2;
  bool has_invalid() const;
  private:
  bool _internal_has_invalid() const;
  public:
  void clear_invalid();
  bool invalid() const;
  void set_invalid(bool value);
  private:
  bool _internal_invalid() const;
  void _internal_set_invalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:spacexpanse.proto.TestBoardState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr only_compare_this_;
    bool invalid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechannel_2fproto_2ftestprotos_2eproto;
};
// -------------------------------------------------------------------

class TestBoardMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacexpanse.proto.TestBoardMove) */ {
 public:
  inline TestBoardMove() : TestBoardMove(nullptr) {}
  ~TestBoardMove() override;
  explicit PROTOBUF_CONSTEXPR TestBoardMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestBoardMove(const TestBoardMove& from);
  TestBoardMove(TestBoardMove&& from) noexcept
    : TestBoardMove() {
    *this = ::std::move(from);
  }

  inline TestBoardMove& operator=(const TestBoardMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestBoardMove& operator=(TestBoardMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestBoardMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestBoardMove* internal_default_instance() {
    return reinterpret_cast<const TestBoardMove*>(
               &_TestBoardMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestBoardMove& a, TestBoardMove& b) {
    a.Swap(&b);
  }
  inline void Swap(TestBoardMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestBoardMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestBoardMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestBoardMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestBoardMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestBoardMove& from) {
    TestBoardMove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestBoardMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacexpanse.proto.TestBoardMove";
  }
  protected:
  explicit TestBoardMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // optional string msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:spacexpanse.proto.TestBoardMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechannel_2fproto_2ftestprotos_2eproto;
};
// -------------------------------------------------------------------

class UnknownFieldTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacexpanse.proto.UnknownFieldTest) */ {
 public:
  inline UnknownFieldTest() : UnknownFieldTest(nullptr) {}
  ~UnknownFieldTest() override;
  explicit PROTOBUF_CONSTEXPR UnknownFieldTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnknownFieldTest(const UnknownFieldTest& from);
  UnknownFieldTest(UnknownFieldTest&& from) noexcept
    : UnknownFieldTest() {
    *this = ::std::move(from);
  }

  inline UnknownFieldTest& operator=(const UnknownFieldTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownFieldTest& operator=(UnknownFieldTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnknownFieldTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnknownFieldTest* internal_default_instance() {
    return reinterpret_cast<const UnknownFieldTest*>(
               &_UnknownFieldTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnknownFieldTest& a, UnknownFieldTest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownFieldTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownFieldTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnknownFieldTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnknownFieldTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnknownFieldTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnknownFieldTest& from) {
    UnknownFieldTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownFieldTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacexpanse.proto.UnknownFieldTest";
  }
  protected:
  explicit UnknownFieldTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedIntFieldNumber = 4,
    kRepeatedStrFieldNumber = 5,
    kRepeatedMsgFieldNumber = 6,
    kSingleStrFieldNumber = 2,
    kSingleMsgFieldNumber = 3,
    kSingleIntFieldNumber = 1,
  };
  // repeated int32 repeated_int = 4;
  int repeated_int_size() const;
  private:
  int _internal_repeated_int_size() const;
  public:
  void clear_repeated_int();
  private:
  int32_t _internal_repeated_int(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_int() const;
  void _internal_add_repeated_int(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_int();
  public:
  int32_t repeated_int(int index) const;
  void set_repeated_int(int index, int32_t value);
  void add_repeated_int(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_int() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_int();

  // repeated string repeated_str = 5;
  int repeated_str_size() const;
  private:
  int _internal_repeated_str_size() const;
  public:
  void clear_repeated_str();
  const std::string& repeated_str(int index) const;
  std::string* mutable_repeated_str(int index);
  void set_repeated_str(int index, const std::string& value);
  void set_repeated_str(int index, std::string&& value);
  void set_repeated_str(int index, const char* value);
  void set_repeated_str(int index, const char* value, size_t size);
  std::string* add_repeated_str();
  void add_repeated_str(const std::string& value);
  void add_repeated_str(std::string&& value);
  void add_repeated_str(const char* value);
  void add_repeated_str(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_str();
  private:
  const std::string& _internal_repeated_str(int index) const;
  std::string* _internal_add_repeated_str();
  public:

  // repeated .spacexpanse.proto.UnknownFieldTest repeated_msg = 6;
  int repeated_msg_size() const;
  private:
  int _internal_repeated_msg_size() const;
  public:
  void clear_repeated_msg();
  ::spacexpanse::proto::UnknownFieldTest* mutable_repeated_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::UnknownFieldTest >*
      mutable_repeated_msg();
  private:
  const ::spacexpanse::proto::UnknownFieldTest& _internal_repeated_msg(int index) const;
  ::spacexpanse::proto::UnknownFieldTest* _internal_add_repeated_msg();
  public:
  const ::spacexpanse::proto::UnknownFieldTest& repeated_msg(int index) const;
  ::spacexpanse::proto::UnknownFieldTest* add_repeated_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::UnknownFieldTest >&
      repeated_msg() const;

  // optional string single_str = 2;
  bool has_single_str() const;
  private:
  bool _internal_has_single_str() const;
  public:
  void clear_single_str();
  const std::string& single_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_single_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_single_str();
  PROTOBUF_NODISCARD std::string* release_single_str();
  void set_allocated_single_str(std::string* single_str);
  private:
  const std::string& _internal_single_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_single_str(const std::string& value);
  std::string* _internal_mutable_single_str();
  public:

  // optional .spacexpanse.proto.UnknownFieldTest single_msg = 3;
  bool has_single_msg() const;
  private:
  bool _internal_has_single_msg() const;
  public:
  void clear_single_msg();
  const ::spacexpanse::proto::UnknownFieldTest& single_msg() const;
  PROTOBUF_NODISCARD ::spacexpanse::proto::UnknownFieldTest* release_single_msg();
  ::spacexpanse::proto::UnknownFieldTest* mutable_single_msg();
  void set_allocated_single_msg(::spacexpanse::proto::UnknownFieldTest* single_msg);
  private:
  const ::spacexpanse::proto::UnknownFieldTest& _internal_single_msg() const;
  ::spacexpanse::proto::UnknownFieldTest* _internal_mutable_single_msg();
  public:
  void unsafe_arena_set_allocated_single_msg(
      ::spacexpanse::proto::UnknownFieldTest* single_msg);
  ::spacexpanse::proto::UnknownFieldTest* unsafe_arena_release_single_msg();

  // optional int32 single_int = 1;
  bool has_single_int() const;
  private:
  bool _internal_has_single_int() const;
  public:
  void clear_single_int();
  int32_t single_int() const;
  void set_single_int(int32_t value);
  private:
  int32_t _internal_single_int() const;
  void _internal_set_single_int(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:spacexpanse.proto.UnknownFieldTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_int_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_str_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::UnknownFieldTest > repeated_msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr single_str_;
    ::spacexpanse::proto::UnknownFieldTest* single_msg_;
    int32_t single_int_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechannel_2fproto_2ftestprotos_2eproto;
};
// -------------------------------------------------------------------

class ExtendedUnknownFieldTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spacexpanse.proto.ExtendedUnknownFieldTest) */ {
 public:
  inline ExtendedUnknownFieldTest() : ExtendedUnknownFieldTest(nullptr) {}
  ~ExtendedUnknownFieldTest() override;
  explicit PROTOBUF_CONSTEXPR ExtendedUnknownFieldTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtendedUnknownFieldTest(const ExtendedUnknownFieldTest& from);
  ExtendedUnknownFieldTest(ExtendedUnknownFieldTest&& from) noexcept
    : ExtendedUnknownFieldTest() {
    *this = ::std::move(from);
  }

  inline ExtendedUnknownFieldTest& operator=(const ExtendedUnknownFieldTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedUnknownFieldTest& operator=(ExtendedUnknownFieldTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendedUnknownFieldTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendedUnknownFieldTest* internal_default_instance() {
    return reinterpret_cast<const ExtendedUnknownFieldTest*>(
               &_ExtendedUnknownFieldTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExtendedUnknownFieldTest& a, ExtendedUnknownFieldTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendedUnknownFieldTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendedUnknownFieldTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendedUnknownFieldTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtendedUnknownFieldTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtendedUnknownFieldTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtendedUnknownFieldTest& from) {
    ExtendedUnknownFieldTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendedUnknownFieldTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spacexpanse.proto.ExtendedUnknownFieldTest";
  }
  protected:
  explicit ExtendedUnknownFieldTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedIntFieldNumber = 4,
    kRepeatedStrFieldNumber = 5,
    kRepeatedMsgFieldNumber = 6,
    kUnknownRepeatedIntFieldNumber = 102,
    kUnknownRepeatedMsgFieldNumber = 103,
    kSingleStrFieldNumber = 2,
    kSingleMsgFieldNumber = 3,
    kUnknownMsgFieldNumber = 101,
    kSingleIntFieldNumber = 1,
    kUnknownIntFieldNumber = 100,
  };
  // repeated int32 repeated_int = 4;
  int repeated_int_size() const;
  private:
  int _internal_repeated_int_size() const;
  public:
  void clear_repeated_int();
  private:
  int32_t _internal_repeated_int(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_int() const;
  void _internal_add_repeated_int(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_int();
  public:
  int32_t repeated_int(int index) const;
  void set_repeated_int(int index, int32_t value);
  void add_repeated_int(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_int() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_int();

  // repeated string repeated_str = 5;
  int repeated_str_size() const;
  private:
  int _internal_repeated_str_size() const;
  public:
  void clear_repeated_str();
  const std::string& repeated_str(int index) const;
  std::string* mutable_repeated_str(int index);
  void set_repeated_str(int index, const std::string& value);
  void set_repeated_str(int index, std::string&& value);
  void set_repeated_str(int index, const char* value);
  void set_repeated_str(int index, const char* value, size_t size);
  std::string* add_repeated_str();
  void add_repeated_str(const std::string& value);
  void add_repeated_str(std::string&& value);
  void add_repeated_str(const char* value);
  void add_repeated_str(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_str();
  private:
  const std::string& _internal_repeated_str(int index) const;
  std::string* _internal_add_repeated_str();
  public:

  // repeated .spacexpanse.proto.ExtendedUnknownFieldTest repeated_msg = 6;
  int repeated_msg_size() const;
  private:
  int _internal_repeated_msg_size() const;
  public:
  void clear_repeated_msg();
  ::spacexpanse::proto::ExtendedUnknownFieldTest* mutable_repeated_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest >*
      mutable_repeated_msg();
  private:
  const ::spacexpanse::proto::ExtendedUnknownFieldTest& _internal_repeated_msg(int index) const;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* _internal_add_repeated_msg();
  public:
  const ::spacexpanse::proto::ExtendedUnknownFieldTest& repeated_msg(int index) const;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* add_repeated_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest >&
      repeated_msg() const;

  // repeated int32 unknown_repeated_int = 102;
  int unknown_repeated_int_size() const;
  private:
  int _internal_unknown_repeated_int_size() const;
  public:
  void clear_unknown_repeated_int();
  private:
  int32_t _internal_unknown_repeated_int(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unknown_repeated_int() const;
  void _internal_add_unknown_repeated_int(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unknown_repeated_int();
  public:
  int32_t unknown_repeated_int(int index) const;
  void set_unknown_repeated_int(int index, int32_t value);
  void add_unknown_repeated_int(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unknown_repeated_int() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unknown_repeated_int();

  // repeated .spacexpanse.proto.ExtendedUnknownFieldTest unknown_repeated_msg = 103;
  int unknown_repeated_msg_size() const;
  private:
  int _internal_unknown_repeated_msg_size() const;
  public:
  void clear_unknown_repeated_msg();
  ::spacexpanse::proto::ExtendedUnknownFieldTest* mutable_unknown_repeated_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest >*
      mutable_unknown_repeated_msg();
  private:
  const ::spacexpanse::proto::ExtendedUnknownFieldTest& _internal_unknown_repeated_msg(int index) const;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* _internal_add_unknown_repeated_msg();
  public:
  const ::spacexpanse::proto::ExtendedUnknownFieldTest& unknown_repeated_msg(int index) const;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* add_unknown_repeated_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest >&
      unknown_repeated_msg() const;

  // optional string single_str = 2;
  bool has_single_str() const;
  private:
  bool _internal_has_single_str() const;
  public:
  void clear_single_str();
  const std::string& single_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_single_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_single_str();
  PROTOBUF_NODISCARD std::string* release_single_str();
  void set_allocated_single_str(std::string* single_str);
  private:
  const std::string& _internal_single_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_single_str(const std::string& value);
  std::string* _internal_mutable_single_str();
  public:

  // optional .spacexpanse.proto.ExtendedUnknownFieldTest single_msg = 3;
  bool has_single_msg() const;
  private:
  bool _internal_has_single_msg() const;
  public:
  void clear_single_msg();
  const ::spacexpanse::proto::ExtendedUnknownFieldTest& single_msg() const;
  PROTOBUF_NODISCARD ::spacexpanse::proto::ExtendedUnknownFieldTest* release_single_msg();
  ::spacexpanse::proto::ExtendedUnknownFieldTest* mutable_single_msg();
  void set_allocated_single_msg(::spacexpanse::proto::ExtendedUnknownFieldTest* single_msg);
  private:
  const ::spacexpanse::proto::ExtendedUnknownFieldTest& _internal_single_msg() const;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* _internal_mutable_single_msg();
  public:
  void unsafe_arena_set_allocated_single_msg(
      ::spacexpanse::proto::ExtendedUnknownFieldTest* single_msg);
  ::spacexpanse::proto::ExtendedUnknownFieldTest* unsafe_arena_release_single_msg();

  // optional .spacexpanse.proto.ExtendedUnknownFieldTest unknown_msg = 101;
  bool has_unknown_msg() const;
  private:
  bool _internal_has_unknown_msg() const;
  public:
  void clear_unknown_msg();
  const ::spacexpanse::proto::ExtendedUnknownFieldTest& unknown_msg() const;
  PROTOBUF_NODISCARD ::spacexpanse::proto::ExtendedUnknownFieldTest* release_unknown_msg();
  ::spacexpanse::proto::ExtendedUnknownFieldTest* mutable_unknown_msg();
  void set_allocated_unknown_msg(::spacexpanse::proto::ExtendedUnknownFieldTest* unknown_msg);
  private:
  const ::spacexpanse::proto::ExtendedUnknownFieldTest& _internal_unknown_msg() const;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* _internal_mutable_unknown_msg();
  public:
  void unsafe_arena_set_allocated_unknown_msg(
      ::spacexpanse::proto::ExtendedUnknownFieldTest* unknown_msg);
  ::spacexpanse::proto::ExtendedUnknownFieldTest* unsafe_arena_release_unknown_msg();

  // optional int32 single_int = 1;
  bool has_single_int() const;
  private:
  bool _internal_has_single_int() const;
  public:
  void clear_single_int();
  int32_t single_int() const;
  void set_single_int(int32_t value);
  private:
  int32_t _internal_single_int() const;
  void _internal_set_single_int(int32_t value);
  public:

  // optional int32 unknown_int = 100;
  bool has_unknown_int() const;
  private:
  bool _internal_has_unknown_int() const;
  public:
  void clear_unknown_int();
  int32_t unknown_int() const;
  void set_unknown_int(int32_t value);
  private:
  int32_t _internal_unknown_int() const;
  void _internal_set_unknown_int(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:spacexpanse.proto.ExtendedUnknownFieldTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_int_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_str_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest > repeated_msg_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unknown_repeated_int_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest > unknown_repeated_msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr single_str_;
    ::spacexpanse::proto::ExtendedUnknownFieldTest* single_msg_;
    ::spacexpanse::proto::ExtendedUnknownFieldTest* unknown_msg_;
    int32_t single_int_;
    int32_t unknown_int_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechannel_2fproto_2ftestprotos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestBoardState

// optional string msg = 1;
inline bool TestBoardState::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestBoardState::has_msg() const {
  return _internal_has_msg();
}
inline void TestBoardState::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestBoardState::msg() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.TestBoardState.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestBoardState::set_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spacexpanse.proto.TestBoardState.msg)
}
inline std::string* TestBoardState::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.TestBoardState.msg)
  return _s;
}
inline const std::string& TestBoardState::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void TestBoardState::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* TestBoardState::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* TestBoardState::release_msg() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.TestBoardState.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestBoardState::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.TestBoardState.msg)
}

// optional bool invalid = 2;
inline bool TestBoardState::_internal_has_invalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestBoardState::has_invalid() const {
  return _internal_has_invalid();
}
inline void TestBoardState::clear_invalid() {
  _impl_.invalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TestBoardState::_internal_invalid() const {
  return _impl_.invalid_;
}
inline bool TestBoardState::invalid() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.TestBoardState.invalid)
  return _internal_invalid();
}
inline void TestBoardState::_internal_set_invalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.invalid_ = value;
}
inline void TestBoardState::set_invalid(bool value) {
  _internal_set_invalid(value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.TestBoardState.invalid)
}

// optional string only_compare_this = 3;
inline bool TestBoardState::_internal_has_only_compare_this() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestBoardState::has_only_compare_this() const {
  return _internal_has_only_compare_this();
}
inline void TestBoardState::clear_only_compare_this() {
  _impl_.only_compare_this_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestBoardState::only_compare_this() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.TestBoardState.only_compare_this)
  return _internal_only_compare_this();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestBoardState::set_only_compare_this(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.only_compare_this_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spacexpanse.proto.TestBoardState.only_compare_this)
}
inline std::string* TestBoardState::mutable_only_compare_this() {
  std::string* _s = _internal_mutable_only_compare_this();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.TestBoardState.only_compare_this)
  return _s;
}
inline const std::string& TestBoardState::_internal_only_compare_this() const {
  return _impl_.only_compare_this_.Get();
}
inline void TestBoardState::_internal_set_only_compare_this(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.only_compare_this_.Set(value, GetArenaForAllocation());
}
inline std::string* TestBoardState::_internal_mutable_only_compare_this() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.only_compare_this_.Mutable(GetArenaForAllocation());
}
inline std::string* TestBoardState::release_only_compare_this() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.TestBoardState.only_compare_this)
  if (!_internal_has_only_compare_this()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.only_compare_this_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.only_compare_this_.IsDefault()) {
    _impl_.only_compare_this_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestBoardState::set_allocated_only_compare_this(std::string* only_compare_this) {
  if (only_compare_this != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.only_compare_this_.SetAllocated(only_compare_this, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.only_compare_this_.IsDefault()) {
    _impl_.only_compare_this_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.TestBoardState.only_compare_this)
}

// -------------------------------------------------------------------

// TestBoardMove

// optional string msg = 1;
inline bool TestBoardMove::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestBoardMove::has_msg() const {
  return _internal_has_msg();
}
inline void TestBoardMove::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestBoardMove::msg() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.TestBoardMove.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestBoardMove::set_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spacexpanse.proto.TestBoardMove.msg)
}
inline std::string* TestBoardMove::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.TestBoardMove.msg)
  return _s;
}
inline const std::string& TestBoardMove::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void TestBoardMove::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* TestBoardMove::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* TestBoardMove::release_msg() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.TestBoardMove.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestBoardMove::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.TestBoardMove.msg)
}

// -------------------------------------------------------------------

// UnknownFieldTest

// optional int32 single_int = 1;
inline bool UnknownFieldTest::_internal_has_single_int() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UnknownFieldTest::has_single_int() const {
  return _internal_has_single_int();
}
inline void UnknownFieldTest::clear_single_int() {
  _impl_.single_int_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t UnknownFieldTest::_internal_single_int() const {
  return _impl_.single_int_;
}
inline int32_t UnknownFieldTest::single_int() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.UnknownFieldTest.single_int)
  return _internal_single_int();
}
inline void UnknownFieldTest::_internal_set_single_int(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.single_int_ = value;
}
inline void UnknownFieldTest::set_single_int(int32_t value) {
  _internal_set_single_int(value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.UnknownFieldTest.single_int)
}

// optional string single_str = 2;
inline bool UnknownFieldTest::_internal_has_single_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnknownFieldTest::has_single_str() const {
  return _internal_has_single_str();
}
inline void UnknownFieldTest::clear_single_str() {
  _impl_.single_str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnknownFieldTest::single_str() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.UnknownFieldTest.single_str)
  return _internal_single_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnknownFieldTest::set_single_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.single_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spacexpanse.proto.UnknownFieldTest.single_str)
}
inline std::string* UnknownFieldTest::mutable_single_str() {
  std::string* _s = _internal_mutable_single_str();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.UnknownFieldTest.single_str)
  return _s;
}
inline const std::string& UnknownFieldTest::_internal_single_str() const {
  return _impl_.single_str_.Get();
}
inline void UnknownFieldTest::_internal_set_single_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.single_str_.Set(value, GetArenaForAllocation());
}
inline std::string* UnknownFieldTest::_internal_mutable_single_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.single_str_.Mutable(GetArenaForAllocation());
}
inline std::string* UnknownFieldTest::release_single_str() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.UnknownFieldTest.single_str)
  if (!_internal_has_single_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.single_str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.single_str_.IsDefault()) {
    _impl_.single_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UnknownFieldTest::set_allocated_single_str(std::string* single_str) {
  if (single_str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.single_str_.SetAllocated(single_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.single_str_.IsDefault()) {
    _impl_.single_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.UnknownFieldTest.single_str)
}

// optional .spacexpanse.proto.UnknownFieldTest single_msg = 3;
inline bool UnknownFieldTest::_internal_has_single_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.single_msg_ != nullptr);
  return value;
}
inline bool UnknownFieldTest::has_single_msg() const {
  return _internal_has_single_msg();
}
inline void UnknownFieldTest::clear_single_msg() {
  if (_impl_.single_msg_ != nullptr) _impl_.single_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::spacexpanse::proto::UnknownFieldTest& UnknownFieldTest::_internal_single_msg() const {
  const ::spacexpanse::proto::UnknownFieldTest* p = _impl_.single_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::spacexpanse::proto::UnknownFieldTest&>(
      ::spacexpanse::proto::_UnknownFieldTest_default_instance_);
}
inline const ::spacexpanse::proto::UnknownFieldTest& UnknownFieldTest::single_msg() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.UnknownFieldTest.single_msg)
  return _internal_single_msg();
}
inline void UnknownFieldTest::unsafe_arena_set_allocated_single_msg(
    ::spacexpanse::proto::UnknownFieldTest* single_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.single_msg_);
  }
  _impl_.single_msg_ = single_msg;
  if (single_msg) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:spacexpanse.proto.UnknownFieldTest.single_msg)
}
inline ::spacexpanse::proto::UnknownFieldTest* UnknownFieldTest::release_single_msg() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::spacexpanse::proto::UnknownFieldTest* temp = _impl_.single_msg_;
  _impl_.single_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::spacexpanse::proto::UnknownFieldTest* UnknownFieldTest::unsafe_arena_release_single_msg() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.UnknownFieldTest.single_msg)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::spacexpanse::proto::UnknownFieldTest* temp = _impl_.single_msg_;
  _impl_.single_msg_ = nullptr;
  return temp;
}
inline ::spacexpanse::proto::UnknownFieldTest* UnknownFieldTest::_internal_mutable_single_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.single_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::spacexpanse::proto::UnknownFieldTest>(GetArenaForAllocation());
    _impl_.single_msg_ = p;
  }
  return _impl_.single_msg_;
}
inline ::spacexpanse::proto::UnknownFieldTest* UnknownFieldTest::mutable_single_msg() {
  ::spacexpanse::proto::UnknownFieldTest* _msg = _internal_mutable_single_msg();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.UnknownFieldTest.single_msg)
  return _msg;
}
inline void UnknownFieldTest::set_allocated_single_msg(::spacexpanse::proto::UnknownFieldTest* single_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.single_msg_;
  }
  if (single_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single_msg);
    if (message_arena != submessage_arena) {
      single_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.single_msg_ = single_msg;
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.UnknownFieldTest.single_msg)
}

// repeated int32 repeated_int = 4;
inline int UnknownFieldTest::_internal_repeated_int_size() const {
  return _impl_.repeated_int_.size();
}
inline int UnknownFieldTest::repeated_int_size() const {
  return _internal_repeated_int_size();
}
inline void UnknownFieldTest::clear_repeated_int() {
  _impl_.repeated_int_.Clear();
}
inline int32_t UnknownFieldTest::_internal_repeated_int(int index) const {
  return _impl_.repeated_int_.Get(index);
}
inline int32_t UnknownFieldTest::repeated_int(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.UnknownFieldTest.repeated_int)
  return _internal_repeated_int(index);
}
inline void UnknownFieldTest::set_repeated_int(int index, int32_t value) {
  _impl_.repeated_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.UnknownFieldTest.repeated_int)
}
inline void UnknownFieldTest::_internal_add_repeated_int(int32_t value) {
  _impl_.repeated_int_.Add(value);
}
inline void UnknownFieldTest::add_repeated_int(int32_t value) {
  _internal_add_repeated_int(value);
  // @@protoc_insertion_point(field_add:spacexpanse.proto.UnknownFieldTest.repeated_int)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UnknownFieldTest::_internal_repeated_int() const {
  return _impl_.repeated_int_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UnknownFieldTest::repeated_int() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.UnknownFieldTest.repeated_int)
  return _internal_repeated_int();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UnknownFieldTest::_internal_mutable_repeated_int() {
  return &_impl_.repeated_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UnknownFieldTest::mutable_repeated_int() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.UnknownFieldTest.repeated_int)
  return _internal_mutable_repeated_int();
}

// repeated string repeated_str = 5;
inline int UnknownFieldTest::_internal_repeated_str_size() const {
  return _impl_.repeated_str_.size();
}
inline int UnknownFieldTest::repeated_str_size() const {
  return _internal_repeated_str_size();
}
inline void UnknownFieldTest::clear_repeated_str() {
  _impl_.repeated_str_.Clear();
}
inline std::string* UnknownFieldTest::add_repeated_str() {
  std::string* _s = _internal_add_repeated_str();
  // @@protoc_insertion_point(field_add_mutable:spacexpanse.proto.UnknownFieldTest.repeated_str)
  return _s;
}
inline const std::string& UnknownFieldTest::_internal_repeated_str(int index) const {
  return _impl_.repeated_str_.Get(index);
}
inline const std::string& UnknownFieldTest::repeated_str(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.UnknownFieldTest.repeated_str)
  return _internal_repeated_str(index);
}
inline std::string* UnknownFieldTest::mutable_repeated_str(int index) {
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.UnknownFieldTest.repeated_str)
  return _impl_.repeated_str_.Mutable(index);
}
inline void UnknownFieldTest::set_repeated_str(int index, const std::string& value) {
  _impl_.repeated_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.UnknownFieldTest.repeated_str)
}
inline void UnknownFieldTest::set_repeated_str(int index, std::string&& value) {
  _impl_.repeated_str_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:spacexpanse.proto.UnknownFieldTest.repeated_str)
}
inline void UnknownFieldTest::set_repeated_str(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spacexpanse.proto.UnknownFieldTest.repeated_str)
}
inline void UnknownFieldTest::set_repeated_str(int index, const char* value, size_t size) {
  _impl_.repeated_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spacexpanse.proto.UnknownFieldTest.repeated_str)
}
inline std::string* UnknownFieldTest::_internal_add_repeated_str() {
  return _impl_.repeated_str_.Add();
}
inline void UnknownFieldTest::add_repeated_str(const std::string& value) {
  _impl_.repeated_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spacexpanse.proto.UnknownFieldTest.repeated_str)
}
inline void UnknownFieldTest::add_repeated_str(std::string&& value) {
  _impl_.repeated_str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:spacexpanse.proto.UnknownFieldTest.repeated_str)
}
inline void UnknownFieldTest::add_repeated_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spacexpanse.proto.UnknownFieldTest.repeated_str)
}
inline void UnknownFieldTest::add_repeated_str(const char* value, size_t size) {
  _impl_.repeated_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spacexpanse.proto.UnknownFieldTest.repeated_str)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UnknownFieldTest::repeated_str() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.UnknownFieldTest.repeated_str)
  return _impl_.repeated_str_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UnknownFieldTest::mutable_repeated_str() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.UnknownFieldTest.repeated_str)
  return &_impl_.repeated_str_;
}

// repeated .spacexpanse.proto.UnknownFieldTest repeated_msg = 6;
inline int UnknownFieldTest::_internal_repeated_msg_size() const {
  return _impl_.repeated_msg_.size();
}
inline int UnknownFieldTest::repeated_msg_size() const {
  return _internal_repeated_msg_size();
}
inline void UnknownFieldTest::clear_repeated_msg() {
  _impl_.repeated_msg_.Clear();
}
inline ::spacexpanse::proto::UnknownFieldTest* UnknownFieldTest::mutable_repeated_msg(int index) {
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.UnknownFieldTest.repeated_msg)
  return _impl_.repeated_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::UnknownFieldTest >*
UnknownFieldTest::mutable_repeated_msg() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.UnknownFieldTest.repeated_msg)
  return &_impl_.repeated_msg_;
}
inline const ::spacexpanse::proto::UnknownFieldTest& UnknownFieldTest::_internal_repeated_msg(int index) const {
  return _impl_.repeated_msg_.Get(index);
}
inline const ::spacexpanse::proto::UnknownFieldTest& UnknownFieldTest::repeated_msg(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.UnknownFieldTest.repeated_msg)
  return _internal_repeated_msg(index);
}
inline ::spacexpanse::proto::UnknownFieldTest* UnknownFieldTest::_internal_add_repeated_msg() {
  return _impl_.repeated_msg_.Add();
}
inline ::spacexpanse::proto::UnknownFieldTest* UnknownFieldTest::add_repeated_msg() {
  ::spacexpanse::proto::UnknownFieldTest* _add = _internal_add_repeated_msg();
  // @@protoc_insertion_point(field_add:spacexpanse.proto.UnknownFieldTest.repeated_msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::UnknownFieldTest >&
UnknownFieldTest::repeated_msg() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.UnknownFieldTest.repeated_msg)
  return _impl_.repeated_msg_;
}

// -------------------------------------------------------------------

// ExtendedUnknownFieldTest

// optional int32 single_int = 1;
inline bool ExtendedUnknownFieldTest::_internal_has_single_int() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtendedUnknownFieldTest::has_single_int() const {
  return _internal_has_single_int();
}
inline void ExtendedUnknownFieldTest::clear_single_int() {
  _impl_.single_int_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ExtendedUnknownFieldTest::_internal_single_int() const {
  return _impl_.single_int_;
}
inline int32_t ExtendedUnknownFieldTest::single_int() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.single_int)
  return _internal_single_int();
}
inline void ExtendedUnknownFieldTest::_internal_set_single_int(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.single_int_ = value;
}
inline void ExtendedUnknownFieldTest::set_single_int(int32_t value) {
  _internal_set_single_int(value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.ExtendedUnknownFieldTest.single_int)
}

// optional string single_str = 2;
inline bool ExtendedUnknownFieldTest::_internal_has_single_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtendedUnknownFieldTest::has_single_str() const {
  return _internal_has_single_str();
}
inline void ExtendedUnknownFieldTest::clear_single_str() {
  _impl_.single_str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtendedUnknownFieldTest::single_str() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.single_str)
  return _internal_single_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtendedUnknownFieldTest::set_single_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.single_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:spacexpanse.proto.ExtendedUnknownFieldTest.single_str)
}
inline std::string* ExtendedUnknownFieldTest::mutable_single_str() {
  std::string* _s = _internal_mutable_single_str();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.ExtendedUnknownFieldTest.single_str)
  return _s;
}
inline const std::string& ExtendedUnknownFieldTest::_internal_single_str() const {
  return _impl_.single_str_.Get();
}
inline void ExtendedUnknownFieldTest::_internal_set_single_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.single_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtendedUnknownFieldTest::_internal_mutable_single_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.single_str_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtendedUnknownFieldTest::release_single_str() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.ExtendedUnknownFieldTest.single_str)
  if (!_internal_has_single_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.single_str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.single_str_.IsDefault()) {
    _impl_.single_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtendedUnknownFieldTest::set_allocated_single_str(std::string* single_str) {
  if (single_str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.single_str_.SetAllocated(single_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.single_str_.IsDefault()) {
    _impl_.single_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.ExtendedUnknownFieldTest.single_str)
}

// optional .spacexpanse.proto.ExtendedUnknownFieldTest single_msg = 3;
inline bool ExtendedUnknownFieldTest::_internal_has_single_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.single_msg_ != nullptr);
  return value;
}
inline bool ExtendedUnknownFieldTest::has_single_msg() const {
  return _internal_has_single_msg();
}
inline void ExtendedUnknownFieldTest::clear_single_msg() {
  if (_impl_.single_msg_ != nullptr) _impl_.single_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::spacexpanse::proto::ExtendedUnknownFieldTest& ExtendedUnknownFieldTest::_internal_single_msg() const {
  const ::spacexpanse::proto::ExtendedUnknownFieldTest* p = _impl_.single_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::spacexpanse::proto::ExtendedUnknownFieldTest&>(
      ::spacexpanse::proto::_ExtendedUnknownFieldTest_default_instance_);
}
inline const ::spacexpanse::proto::ExtendedUnknownFieldTest& ExtendedUnknownFieldTest::single_msg() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.single_msg)
  return _internal_single_msg();
}
inline void ExtendedUnknownFieldTest::unsafe_arena_set_allocated_single_msg(
    ::spacexpanse::proto::ExtendedUnknownFieldTest* single_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.single_msg_);
  }
  _impl_.single_msg_ = single_msg;
  if (single_msg) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:spacexpanse.proto.ExtendedUnknownFieldTest.single_msg)
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::release_single_msg() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* temp = _impl_.single_msg_;
  _impl_.single_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::unsafe_arena_release_single_msg() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.ExtendedUnknownFieldTest.single_msg)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* temp = _impl_.single_msg_;
  _impl_.single_msg_ = nullptr;
  return temp;
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::_internal_mutable_single_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.single_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::spacexpanse::proto::ExtendedUnknownFieldTest>(GetArenaForAllocation());
    _impl_.single_msg_ = p;
  }
  return _impl_.single_msg_;
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::mutable_single_msg() {
  ::spacexpanse::proto::ExtendedUnknownFieldTest* _msg = _internal_mutable_single_msg();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.ExtendedUnknownFieldTest.single_msg)
  return _msg;
}
inline void ExtendedUnknownFieldTest::set_allocated_single_msg(::spacexpanse::proto::ExtendedUnknownFieldTest* single_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.single_msg_;
  }
  if (single_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single_msg);
    if (message_arena != submessage_arena) {
      single_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.single_msg_ = single_msg;
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.ExtendedUnknownFieldTest.single_msg)
}

// repeated int32 repeated_int = 4;
inline int ExtendedUnknownFieldTest::_internal_repeated_int_size() const {
  return _impl_.repeated_int_.size();
}
inline int ExtendedUnknownFieldTest::repeated_int_size() const {
  return _internal_repeated_int_size();
}
inline void ExtendedUnknownFieldTest::clear_repeated_int() {
  _impl_.repeated_int_.Clear();
}
inline int32_t ExtendedUnknownFieldTest::_internal_repeated_int(int index) const {
  return _impl_.repeated_int_.Get(index);
}
inline int32_t ExtendedUnknownFieldTest::repeated_int(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_int)
  return _internal_repeated_int(index);
}
inline void ExtendedUnknownFieldTest::set_repeated_int(int index, int32_t value) {
  _impl_.repeated_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_int)
}
inline void ExtendedUnknownFieldTest::_internal_add_repeated_int(int32_t value) {
  _impl_.repeated_int_.Add(value);
}
inline void ExtendedUnknownFieldTest::add_repeated_int(int32_t value) {
  _internal_add_repeated_int(value);
  // @@protoc_insertion_point(field_add:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_int)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExtendedUnknownFieldTest::_internal_repeated_int() const {
  return _impl_.repeated_int_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExtendedUnknownFieldTest::repeated_int() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_int)
  return _internal_repeated_int();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExtendedUnknownFieldTest::_internal_mutable_repeated_int() {
  return &_impl_.repeated_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExtendedUnknownFieldTest::mutable_repeated_int() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_int)
  return _internal_mutable_repeated_int();
}

// repeated string repeated_str = 5;
inline int ExtendedUnknownFieldTest::_internal_repeated_str_size() const {
  return _impl_.repeated_str_.size();
}
inline int ExtendedUnknownFieldTest::repeated_str_size() const {
  return _internal_repeated_str_size();
}
inline void ExtendedUnknownFieldTest::clear_repeated_str() {
  _impl_.repeated_str_.Clear();
}
inline std::string* ExtendedUnknownFieldTest::add_repeated_str() {
  std::string* _s = _internal_add_repeated_str();
  // @@protoc_insertion_point(field_add_mutable:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
  return _s;
}
inline const std::string& ExtendedUnknownFieldTest::_internal_repeated_str(int index) const {
  return _impl_.repeated_str_.Get(index);
}
inline const std::string& ExtendedUnknownFieldTest::repeated_str(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
  return _internal_repeated_str(index);
}
inline std::string* ExtendedUnknownFieldTest::mutable_repeated_str(int index) {
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
  return _impl_.repeated_str_.Mutable(index);
}
inline void ExtendedUnknownFieldTest::set_repeated_str(int index, const std::string& value) {
  _impl_.repeated_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
}
inline void ExtendedUnknownFieldTest::set_repeated_str(int index, std::string&& value) {
  _impl_.repeated_str_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
}
inline void ExtendedUnknownFieldTest::set_repeated_str(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
}
inline void ExtendedUnknownFieldTest::set_repeated_str(int index, const char* value, size_t size) {
  _impl_.repeated_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
}
inline std::string* ExtendedUnknownFieldTest::_internal_add_repeated_str() {
  return _impl_.repeated_str_.Add();
}
inline void ExtendedUnknownFieldTest::add_repeated_str(const std::string& value) {
  _impl_.repeated_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
}
inline void ExtendedUnknownFieldTest::add_repeated_str(std::string&& value) {
  _impl_.repeated_str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
}
inline void ExtendedUnknownFieldTest::add_repeated_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
}
inline void ExtendedUnknownFieldTest::add_repeated_str(const char* value, size_t size) {
  _impl_.repeated_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExtendedUnknownFieldTest::repeated_str() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
  return _impl_.repeated_str_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExtendedUnknownFieldTest::mutable_repeated_str() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_str)
  return &_impl_.repeated_str_;
}

// repeated .spacexpanse.proto.ExtendedUnknownFieldTest repeated_msg = 6;
inline int ExtendedUnknownFieldTest::_internal_repeated_msg_size() const {
  return _impl_.repeated_msg_.size();
}
inline int ExtendedUnknownFieldTest::repeated_msg_size() const {
  return _internal_repeated_msg_size();
}
inline void ExtendedUnknownFieldTest::clear_repeated_msg() {
  _impl_.repeated_msg_.Clear();
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::mutable_repeated_msg(int index) {
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_msg)
  return _impl_.repeated_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest >*
ExtendedUnknownFieldTest::mutable_repeated_msg() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_msg)
  return &_impl_.repeated_msg_;
}
inline const ::spacexpanse::proto::ExtendedUnknownFieldTest& ExtendedUnknownFieldTest::_internal_repeated_msg(int index) const {
  return _impl_.repeated_msg_.Get(index);
}
inline const ::spacexpanse::proto::ExtendedUnknownFieldTest& ExtendedUnknownFieldTest::repeated_msg(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_msg)
  return _internal_repeated_msg(index);
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::_internal_add_repeated_msg() {
  return _impl_.repeated_msg_.Add();
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::add_repeated_msg() {
  ::spacexpanse::proto::ExtendedUnknownFieldTest* _add = _internal_add_repeated_msg();
  // @@protoc_insertion_point(field_add:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest >&
ExtendedUnknownFieldTest::repeated_msg() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.ExtendedUnknownFieldTest.repeated_msg)
  return _impl_.repeated_msg_;
}

// optional int32 unknown_int = 100;
inline bool ExtendedUnknownFieldTest::_internal_has_unknown_int() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExtendedUnknownFieldTest::has_unknown_int() const {
  return _internal_has_unknown_int();
}
inline void ExtendedUnknownFieldTest::clear_unknown_int() {
  _impl_.unknown_int_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ExtendedUnknownFieldTest::_internal_unknown_int() const {
  return _impl_.unknown_int_;
}
inline int32_t ExtendedUnknownFieldTest::unknown_int() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_int)
  return _internal_unknown_int();
}
inline void ExtendedUnknownFieldTest::_internal_set_unknown_int(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.unknown_int_ = value;
}
inline void ExtendedUnknownFieldTest::set_unknown_int(int32_t value) {
  _internal_set_unknown_int(value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_int)
}

// optional .spacexpanse.proto.ExtendedUnknownFieldTest unknown_msg = 101;
inline bool ExtendedUnknownFieldTest::_internal_has_unknown_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unknown_msg_ != nullptr);
  return value;
}
inline bool ExtendedUnknownFieldTest::has_unknown_msg() const {
  return _internal_has_unknown_msg();
}
inline void ExtendedUnknownFieldTest::clear_unknown_msg() {
  if (_impl_.unknown_msg_ != nullptr) _impl_.unknown_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::spacexpanse::proto::ExtendedUnknownFieldTest& ExtendedUnknownFieldTest::_internal_unknown_msg() const {
  const ::spacexpanse::proto::ExtendedUnknownFieldTest* p = _impl_.unknown_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::spacexpanse::proto::ExtendedUnknownFieldTest&>(
      ::spacexpanse::proto::_ExtendedUnknownFieldTest_default_instance_);
}
inline const ::spacexpanse::proto::ExtendedUnknownFieldTest& ExtendedUnknownFieldTest::unknown_msg() const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_msg)
  return _internal_unknown_msg();
}
inline void ExtendedUnknownFieldTest::unsafe_arena_set_allocated_unknown_msg(
    ::spacexpanse::proto::ExtendedUnknownFieldTest* unknown_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unknown_msg_);
  }
  _impl_.unknown_msg_ = unknown_msg;
  if (unknown_msg) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_msg)
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::release_unknown_msg() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* temp = _impl_.unknown_msg_;
  _impl_.unknown_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::unsafe_arena_release_unknown_msg() {
  // @@protoc_insertion_point(field_release:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_msg)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::spacexpanse::proto::ExtendedUnknownFieldTest* temp = _impl_.unknown_msg_;
  _impl_.unknown_msg_ = nullptr;
  return temp;
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::_internal_mutable_unknown_msg() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.unknown_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::spacexpanse::proto::ExtendedUnknownFieldTest>(GetArenaForAllocation());
    _impl_.unknown_msg_ = p;
  }
  return _impl_.unknown_msg_;
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::mutable_unknown_msg() {
  ::spacexpanse::proto::ExtendedUnknownFieldTest* _msg = _internal_mutable_unknown_msg();
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_msg)
  return _msg;
}
inline void ExtendedUnknownFieldTest::set_allocated_unknown_msg(::spacexpanse::proto::ExtendedUnknownFieldTest* unknown_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unknown_msg_;
  }
  if (unknown_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unknown_msg);
    if (message_arena != submessage_arena) {
      unknown_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unknown_msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.unknown_msg_ = unknown_msg;
  // @@protoc_insertion_point(field_set_allocated:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_msg)
}

// repeated int32 unknown_repeated_int = 102;
inline int ExtendedUnknownFieldTest::_internal_unknown_repeated_int_size() const {
  return _impl_.unknown_repeated_int_.size();
}
inline int ExtendedUnknownFieldTest::unknown_repeated_int_size() const {
  return _internal_unknown_repeated_int_size();
}
inline void ExtendedUnknownFieldTest::clear_unknown_repeated_int() {
  _impl_.unknown_repeated_int_.Clear();
}
inline int32_t ExtendedUnknownFieldTest::_internal_unknown_repeated_int(int index) const {
  return _impl_.unknown_repeated_int_.Get(index);
}
inline int32_t ExtendedUnknownFieldTest::unknown_repeated_int(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_int)
  return _internal_unknown_repeated_int(index);
}
inline void ExtendedUnknownFieldTest::set_unknown_repeated_int(int index, int32_t value) {
  _impl_.unknown_repeated_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_int)
}
inline void ExtendedUnknownFieldTest::_internal_add_unknown_repeated_int(int32_t value) {
  _impl_.unknown_repeated_int_.Add(value);
}
inline void ExtendedUnknownFieldTest::add_unknown_repeated_int(int32_t value) {
  _internal_add_unknown_repeated_int(value);
  // @@protoc_insertion_point(field_add:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_int)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExtendedUnknownFieldTest::_internal_unknown_repeated_int() const {
  return _impl_.unknown_repeated_int_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExtendedUnknownFieldTest::unknown_repeated_int() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_int)
  return _internal_unknown_repeated_int();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExtendedUnknownFieldTest::_internal_mutable_unknown_repeated_int() {
  return &_impl_.unknown_repeated_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExtendedUnknownFieldTest::mutable_unknown_repeated_int() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_int)
  return _internal_mutable_unknown_repeated_int();
}

// repeated .spacexpanse.proto.ExtendedUnknownFieldTest unknown_repeated_msg = 103;
inline int ExtendedUnknownFieldTest::_internal_unknown_repeated_msg_size() const {
  return _impl_.unknown_repeated_msg_.size();
}
inline int ExtendedUnknownFieldTest::unknown_repeated_msg_size() const {
  return _internal_unknown_repeated_msg_size();
}
inline void ExtendedUnknownFieldTest::clear_unknown_repeated_msg() {
  _impl_.unknown_repeated_msg_.Clear();
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::mutable_unknown_repeated_msg(int index) {
  // @@protoc_insertion_point(field_mutable:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_msg)
  return _impl_.unknown_repeated_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest >*
ExtendedUnknownFieldTest::mutable_unknown_repeated_msg() {
  // @@protoc_insertion_point(field_mutable_list:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_msg)
  return &_impl_.unknown_repeated_msg_;
}
inline const ::spacexpanse::proto::ExtendedUnknownFieldTest& ExtendedUnknownFieldTest::_internal_unknown_repeated_msg(int index) const {
  return _impl_.unknown_repeated_msg_.Get(index);
}
inline const ::spacexpanse::proto::ExtendedUnknownFieldTest& ExtendedUnknownFieldTest::unknown_repeated_msg(int index) const {
  // @@protoc_insertion_point(field_get:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_msg)
  return _internal_unknown_repeated_msg(index);
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::_internal_add_unknown_repeated_msg() {
  return _impl_.unknown_repeated_msg_.Add();
}
inline ::spacexpanse::proto::ExtendedUnknownFieldTest* ExtendedUnknownFieldTest::add_unknown_repeated_msg() {
  ::spacexpanse::proto::ExtendedUnknownFieldTest* _add = _internal_add_unknown_repeated_msg();
  // @@protoc_insertion_point(field_add:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spacexpanse::proto::ExtendedUnknownFieldTest >&
ExtendedUnknownFieldTest::unknown_repeated_msg() const {
  // @@protoc_insertion_point(field_list:spacexpanse.proto.ExtendedUnknownFieldTest.unknown_repeated_msg)
  return _impl_.unknown_repeated_msg_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace spacexpanse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sidechannel_2fproto_2ftestprotos_2eproto
