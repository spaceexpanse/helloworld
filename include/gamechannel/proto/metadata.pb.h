// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamechannel/proto/metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gamechannel_2fproto_2fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gamechannel_2fproto_2fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gamechannel_2fproto_2fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gamechannel_2fproto_2fmetadata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gamechannel_2fproto_2fmetadata_2eproto;
namespace xaya {
namespace proto {
class ChannelMetadata;
struct ChannelMetadataDefaultTypeInternal;
extern ChannelMetadataDefaultTypeInternal _ChannelMetadata_default_instance_;
class ChannelParticipant;
struct ChannelParticipantDefaultTypeInternal;
extern ChannelParticipantDefaultTypeInternal _ChannelParticipant_default_instance_;
}  // namespace proto
}  // namespace xaya
PROTOBUF_NAMESPACE_OPEN
template<> ::xaya::proto::ChannelMetadata* Arena::CreateMaybeMessage<::xaya::proto::ChannelMetadata>(Arena*);
template<> ::xaya::proto::ChannelParticipant* Arena::CreateMaybeMessage<::xaya::proto::ChannelParticipant>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xaya {
namespace proto {

// ===================================================================

class ChannelParticipant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xaya.proto.ChannelParticipant) */ {
 public:
  inline ChannelParticipant() : ChannelParticipant(nullptr) {}
  ~ChannelParticipant() override;
  explicit PROTOBUF_CONSTEXPR ChannelParticipant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelParticipant(const ChannelParticipant& from);
  ChannelParticipant(ChannelParticipant&& from) noexcept
    : ChannelParticipant() {
    *this = ::std::move(from);
  }

  inline ChannelParticipant& operator=(const ChannelParticipant& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelParticipant& operator=(ChannelParticipant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelParticipant& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelParticipant* internal_default_instance() {
    return reinterpret_cast<const ChannelParticipant*>(
               &_ChannelParticipant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChannelParticipant& a, ChannelParticipant& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelParticipant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelParticipant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelParticipant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelParticipant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelParticipant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelParticipant& from) {
    ChannelParticipant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelParticipant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xaya.proto.ChannelParticipant";
  }
  protected:
  explicit ChannelParticipant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:xaya.proto.ChannelParticipant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gamechannel_2fproto_2fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ChannelMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xaya.proto.ChannelMetadata) */ {
 public:
  inline ChannelMetadata() : ChannelMetadata(nullptr) {}
  ~ChannelMetadata() override;
  explicit PROTOBUF_CONSTEXPR ChannelMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelMetadata(const ChannelMetadata& from);
  ChannelMetadata(ChannelMetadata&& from) noexcept
    : ChannelMetadata() {
    *this = ::std::move(from);
  }

  inline ChannelMetadata& operator=(const ChannelMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelMetadata& operator=(ChannelMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelMetadata* internal_default_instance() {
    return reinterpret_cast<const ChannelMetadata*>(
               &_ChannelMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelMetadata& a, ChannelMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelMetadata& from) {
    ChannelMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xaya.proto.ChannelMetadata";
  }
  protected:
  explicit ChannelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantsFieldNumber = 1,
    kReinitFieldNumber = 2,
    kCustomFieldNumber = 3,
  };
  // repeated .xaya.proto.ChannelParticipant participants = 1;
  int participants_size() const;
  private:
  int _internal_participants_size() const;
  public:
  void clear_participants();
  ::xaya::proto::ChannelParticipant* mutable_participants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xaya::proto::ChannelParticipant >*
      mutable_participants();
  private:
  const ::xaya::proto::ChannelParticipant& _internal_participants(int index) const;
  ::xaya::proto::ChannelParticipant* _internal_add_participants();
  public:
  const ::xaya::proto::ChannelParticipant& participants(int index) const;
  ::xaya::proto::ChannelParticipant* add_participants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xaya::proto::ChannelParticipant >&
      participants() const;

  // optional bytes reinit = 2;
  bool has_reinit() const;
  private:
  bool _internal_has_reinit() const;
  public:
  void clear_reinit();
  const std::string& reinit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reinit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reinit();
  PROTOBUF_NODISCARD std::string* release_reinit();
  void set_allocated_reinit(std::string* reinit);
  private:
  const std::string& _internal_reinit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reinit(const std::string& value);
  std::string* _internal_mutable_reinit();
  public:

  // optional bytes custom = 3;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const std::string& custom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom();
  PROTOBUF_NODISCARD std::string* release_custom();
  void set_allocated_custom(std::string* custom);
  private:
  const std::string& _internal_custom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom(const std::string& value);
  std::string* _internal_mutable_custom();
  public:

  // @@protoc_insertion_point(class_scope:xaya.proto.ChannelMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xaya::proto::ChannelParticipant > participants_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gamechannel_2fproto_2fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelParticipant

// optional string name = 1;
inline bool ChannelParticipant::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelParticipant::has_name() const {
  return _internal_has_name();
}
inline void ChannelParticipant::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelParticipant::name() const {
  // @@protoc_insertion_point(field_get:xaya.proto.ChannelParticipant.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelParticipant::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xaya.proto.ChannelParticipant.name)
}
inline std::string* ChannelParticipant::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:xaya.proto.ChannelParticipant.name)
  return _s;
}
inline const std::string& ChannelParticipant::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChannelParticipant::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelParticipant::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelParticipant::release_name() {
  // @@protoc_insertion_point(field_release:xaya.proto.ChannelParticipant.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChannelParticipant::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xaya.proto.ChannelParticipant.name)
}

// optional string address = 2;
inline bool ChannelParticipant::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelParticipant::has_address() const {
  return _internal_has_address();
}
inline void ChannelParticipant::clear_address() {
  _impl_.address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChannelParticipant::address() const {
  // @@protoc_insertion_point(field_get:xaya.proto.ChannelParticipant.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelParticipant::set_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xaya.proto.ChannelParticipant.address)
}
inline std::string* ChannelParticipant::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:xaya.proto.ChannelParticipant.address)
  return _s;
}
inline const std::string& ChannelParticipant::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ChannelParticipant::_internal_set_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelParticipant::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelParticipant::release_address() {
  // @@protoc_insertion_point(field_release:xaya.proto.ChannelParticipant.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChannelParticipant::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xaya.proto.ChannelParticipant.address)
}

// -------------------------------------------------------------------

// ChannelMetadata

// repeated .xaya.proto.ChannelParticipant participants = 1;
inline int ChannelMetadata::_internal_participants_size() const {
  return _impl_.participants_.size();
}
inline int ChannelMetadata::participants_size() const {
  return _internal_participants_size();
}
inline void ChannelMetadata::clear_participants() {
  _impl_.participants_.Clear();
}
inline ::xaya::proto::ChannelParticipant* ChannelMetadata::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:xaya.proto.ChannelMetadata.participants)
  return _impl_.participants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xaya::proto::ChannelParticipant >*
ChannelMetadata::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:xaya.proto.ChannelMetadata.participants)
  return &_impl_.participants_;
}
inline const ::xaya::proto::ChannelParticipant& ChannelMetadata::_internal_participants(int index) const {
  return _impl_.participants_.Get(index);
}
inline const ::xaya::proto::ChannelParticipant& ChannelMetadata::participants(int index) const {
  // @@protoc_insertion_point(field_get:xaya.proto.ChannelMetadata.participants)
  return _internal_participants(index);
}
inline ::xaya::proto::ChannelParticipant* ChannelMetadata::_internal_add_participants() {
  return _impl_.participants_.Add();
}
inline ::xaya::proto::ChannelParticipant* ChannelMetadata::add_participants() {
  ::xaya::proto::ChannelParticipant* _add = _internal_add_participants();
  // @@protoc_insertion_point(field_add:xaya.proto.ChannelMetadata.participants)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xaya::proto::ChannelParticipant >&
ChannelMetadata::participants() const {
  // @@protoc_insertion_point(field_list:xaya.proto.ChannelMetadata.participants)
  return _impl_.participants_;
}

// optional bytes reinit = 2;
inline bool ChannelMetadata::_internal_has_reinit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelMetadata::has_reinit() const {
  return _internal_has_reinit();
}
inline void ChannelMetadata::clear_reinit() {
  _impl_.reinit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelMetadata::reinit() const {
  // @@protoc_insertion_point(field_get:xaya.proto.ChannelMetadata.reinit)
  return _internal_reinit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelMetadata::set_reinit(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reinit_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xaya.proto.ChannelMetadata.reinit)
}
inline std::string* ChannelMetadata::mutable_reinit() {
  std::string* _s = _internal_mutable_reinit();
  // @@protoc_insertion_point(field_mutable:xaya.proto.ChannelMetadata.reinit)
  return _s;
}
inline const std::string& ChannelMetadata::_internal_reinit() const {
  return _impl_.reinit_.Get();
}
inline void ChannelMetadata::_internal_set_reinit(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reinit_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelMetadata::_internal_mutable_reinit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reinit_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelMetadata::release_reinit() {
  // @@protoc_insertion_point(field_release:xaya.proto.ChannelMetadata.reinit)
  if (!_internal_has_reinit()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reinit_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reinit_.IsDefault()) {
    _impl_.reinit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChannelMetadata::set_allocated_reinit(std::string* reinit) {
  if (reinit != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reinit_.SetAllocated(reinit, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reinit_.IsDefault()) {
    _impl_.reinit_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xaya.proto.ChannelMetadata.reinit)
}

// optional bytes custom = 3;
inline bool ChannelMetadata::_internal_has_custom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelMetadata::has_custom() const {
  return _internal_has_custom();
}
inline void ChannelMetadata::clear_custom() {
  _impl_.custom_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChannelMetadata::custom() const {
  // @@protoc_insertion_point(field_get:xaya.proto.ChannelMetadata.custom)
  return _internal_custom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelMetadata::set_custom(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.custom_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xaya.proto.ChannelMetadata.custom)
}
inline std::string* ChannelMetadata::mutable_custom() {
  std::string* _s = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:xaya.proto.ChannelMetadata.custom)
  return _s;
}
inline const std::string& ChannelMetadata::_internal_custom() const {
  return _impl_.custom_.Get();
}
inline void ChannelMetadata::_internal_set_custom(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.custom_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelMetadata::_internal_mutable_custom() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.custom_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelMetadata::release_custom() {
  // @@protoc_insertion_point(field_release:xaya.proto.ChannelMetadata.custom)
  if (!_internal_has_custom()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.custom_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_.IsDefault()) {
    _impl_.custom_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChannelMetadata::set_allocated_custom(std::string* custom) {
  if (custom != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.custom_.SetAllocated(custom, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_.IsDefault()) {
    _impl_.custom_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xaya.proto.ChannelMetadata.custom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace xaya

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gamechannel_2fproto_2fmetadata_2eproto
